31.	Что такое тестирование на соответствие? (Conformance/Compilance testing)
CONFORMANCE testing - это тип тестирования программного обеспечения, который удостоверяет, что система программного обеспечения соответствует стандартам и правилам, определенным IEEE, W3C или ETSI. Цель проверки соответствия состоит в том, чтобы определить, в какой степени отдельная реализация конкретного стандарта соответствует индивидуальным требованиям этого стандарта. Включает в себя: 
	* Производительность
	* Функции 
	* Прочность (Robustness)
	* Совместимость (Interoperability) 
	* Поведение системы
Тестирование соответствия может быть логическим или физическим, и оно включает в себя следующие типы тестирования: 
	* Тестирование на соответствие (Compliance testing)
	* Нагрузочное тестирование (Load testing)
	* Стресс тестирование (Stress testing)
	* Объемное тестирование (Volume testing)
Тестирование соответствия также называется Type testing, который является формальным способом тестирования.
___________________________________________________________________________________

32.	Что такое нефункциональное тестирование?
НЕФУНКЦИОНАЛЬНОЕ тестирование определяется как тип тестирования ПО для проверки нефункциональных аспектов ПО. Оно предназначено для проверки готовности системы по нефункциональным параметрам, которые никогда не учитываются при функциональном тестировании.
	* Нефункциональное тестирование должно повысить удобство использования, эффективность, ремонтопригодность и portability продукта. 
	* Помогает снизить производственный риск и затраты, связанные с нефункциональными аспектами продукта. 
Позволяет:
	* оптимизировать способ установки, настройки, выполнения, управления и мониторинга продукта. 
	* Собирать и производить измерения и метрики для внутренних исследований и разработок. 
	* Улучшать и расширять знания о поведении продукта и используемых технологиях.
Основные нефункциональные типы тестирования:

	* Производительности (Performance)
		- Стрессовое (Stress testing)
		- Тестирование емкости/способностей (Capacity testing)
		- Нагрузочное (Load testing)
		- Объемное тестирование (Volume testing)
		- Выносливости/стабильности/надежности (Soak/Endurance/Stability/Reliability testing)
		- Шиповое (Spike)
		- Масштабируемости (Scalability Test)
	* Тестирование времени отклика (Response Time testing)
	* Тестирование на отказоустойчивость (Failover testing)
	* Тестирование совместимости (Compatibility testing)
	* Тестирование на удобство пользования (Usability testing)
	* Тестирование на поддерживаемость/ремонтопригодность (Maintainability testing)
	* Тестирование безопасности (Security testing)
	* Тестирование аварийного восстановления (Disaster Recovery testing)
	* Тестирование на соответствие (Compliance testing)
	* Тестирование переносимости (Portability testing)
	* Тестирование эффективности (Efficiency testing)
	* Базовое тестирование (Baseline testing)
	* Тестирование документации (Documentation testing)
	* Тестирование восстановления (Recovery testing)
	* Интернационализация (Globalization/Internationalization testing)
	* Тестирование локализации (Localization testing)
___________________________________________________________________________________

33.	Что вы знаете о Тестировании удобства пользования? (Usability testing)
Тестирование удобства пользования - это метод тестирования, направленный на установление степени удобства использования, обучаемости, понятности и привлекательности для пользователей разрабатываемого продукта в контексте заданных условий. Тестирование удобства пользования дает оценку уровня удобства использования приложения по следующим пунктам:
	* производительность, эффективность (efficiency) - сколько времени и шагов понадобится пользователю для завершения основных задач приложения, например, размещение новости, регистрации, покупка и т. д. ? (меньше - лучше)
	* правильность (accuracy) - сколько ошибок сделал пользователь во время работы с приложением? (меньше - лучше)
	* активизация в памяти (recall) – как много пользователь помнит о работе приложения после приостановки работы с ним на длительный период времени? (повторное выполнение операций после перерыва должно проходить быстрее чем у нового пользователя)
	* эмоциональная реакция (emotional response) – как пользователь себя чувствует после завершения задачи - растерян, испытал стресс? Порекомендует ли пользователь систему своим друзьям? (положительная реакция - лучше)
Проверка удобства использования может проводиться как по отношению к готовому продукту, посредством тестирования черного ящика (black box testing), так и к интерфейсам приложения (API), используемым при разработке - тестирование белого ящика (white box testing). В этом случае проверяется удобство использования внутренних объектов, классов, методов и переменных, а также рассматривается удобство изменения, расширения системы и интеграции ее с другими модулями или системами. Использование удобных интерфейсов (API) может улучшить качество, увеличить скорость написания и поддержки разрабатываемого кода, и как следствие улучшить качество продукта в целом. Отсюда становится очевидно, что тестирование удобства пользования может производиться на разных уровнях разработки ПО: модульном, интеграционном, системном и приемочном.
___________________________________________________________________________________

34.	Отличия тестирование на удобство пользования и тестирования доступности? (Usability Vs. Accessibility testing)
USABILITY testing показывает, насколько проста в использовании и удобна система программного обеспечения. Здесь небольшой набор целевых конечных пользователей «использует» программную систему для выявления дефектов юзабилити. Основное внимание в этом тестировании уделяется простоте использования приложения пользователем, гибкости в управлении средствами управления и способности системы выполнять свои задачи. Это также называется тестированием пользовательского опыта (UX – "Ю-Экс", user experience). Это тестирование рекомендуется на начальном этапе разработки SDLC, что позволяет лучше понять ожидания пользователей. Исследования (Virzi, 1992 и Neilsen Landauer, 1993) показывают, что 5 пользователей достаточно для выявления 80% проблем с юзабилити, хотя некоторые исследователи предлагают другие цифры. Тестирование доступности (accessibility testing) - это подмножество юзабилити-тестирования. Его цель - убедиться в том, что наш продукт удобен в использовании для людей с различными видами инвалидности или особенностей восприятия. Это могут быть проблемы со зрением, слухом или ограничения в подвижности рук.  Ваш продукт должен правильно работать с соответствующим ПО. Примеры такого программного обеспечения:
	* Speech Recognition Software - ПО преобразует произнесенное слово в текст, который служит вводом для компьютера. 
	* Программа для чтения с экрана - используется для озвучивания текста, отображаемого на экране 
	* Программное обеспечение для увеличения экрана - используется для увеличения масштаба элементов и облегчения чтения для пользователей с нарушениями зрения. 
	* Специальная клавиатура, облегчающая ввод для пользователей, у которых проблемы с двигательными функциями.
Еще один из примеров - люди с цветовой слепотой (дальтонизмом). Эта особенность довольно широко распространена. Различными видами цветовой слепоты страдают около 8 % мужчин и 0,4 % женщин - не так уж мало! Цвет не должен быть единственным способом передачи информации. Если вы используете цвет для того, чтобы, допустим, отобразить статус, эту информацию стоит продублировать еще каким-то образом - геометрическими фигурами, иконками или текстовым комментарием. Хорошая контрастность. Хорошая контрастность обеспечивает нормальную видимость элементов управления и текста даже для людей, не различающих те или иные оттенки. Есть отличный инструмент для тестирования веб-сайтов на предмет доступности для людей с различными формами цветовой слепоты: Color Blind Web Page Filter.  
Если вы хотите сократить количество тестов, можно ограничиться только тремя фильтрами: дейтеранопия, протанопия и тританопия. Это наиболее выраженные формы цветовой слепоты (не считая крайне редкого черно-белого зрения). Остальные люди с особенностями цветовосприятия видят больше оттенков, и если ваш UI достаточно хорошо виден с этими тремя фильтрами, то и для остальных будет отображаться корректно. Пример чек-листа:
	* Предоставляет ли приложение клавиатурные эквиваленты для всех действий мышью и окон? 
	* Предоставляются ли инструкции как часть пользовательской документации или руководства? Легко ли понять и использовать приложение, используя документацию? 
	* Упорядочены ли вкладки логически для обеспечения плавной навигации? 
	* Предусмотрены ли сочетания клавиш для меню? 
	* Поддерживает ли приложение все операционные системы? 
	* Четко ли указано время отклика каждого экрана или страницы, чтобы конечные пользователи знали, как долго ждать? 
	* Все ли надписи правильно написаны? 
	* Являются ли цвета подходящим для всех пользователей? 
	* Правильно ли используются изображения или значки, чтобы их было легко понять конечным пользователям? 
	* Есть ли звуковые оповещения? 
	* Может ли пользователь настроить аудио или видео элементы управления? 
	* Может ли пользователь переопределить шрифты по умолчанию для печати и отображения текста? 
	* Может ли пользователь настроить или отключить мигание, вращение или перемещение элементов? 
	* Убедитесь, что цветовое кодирование никогда не используется в качестве единственного средства передачи информации или указания на действие 
	* Видна ли подсветка с инвертированными цветами? 
	* Тестирование цвета в приложении путем изменения контрастности 
	* Правильно ли слышат люди с ограниченными возможностями все имеющее отношение к аудио и видео?
	* Протестируйте все мультимедийные страницы без мультимедиа-оборудования. 
	* Предоставляется ли обучение пользователям с ограниченными возможностями, что позволит им ознакомиться с программным обеспечением или приложением?
___________________________________________________________________________________

35.	Что такое тестирование интерфейса?
Это тип интеграционного теста, который проверяет, правильно ли установлена ​​связь между двумя различными программными системами или их частями (модулями). Соединение, которое объединяет два компонента, называется интерфейсом. Этот интерфейс в компьютерном мире может быть чем угодно, как API, так и веб-сервисами и т. д.  Тестирование этих подключаемых сервисов или интерфейса называется Тестированием интерфейса. Тестирование интерфейса включает в себя тестирование двух основных сегментов: 
	* Интерфейс веб-сервера и сервера приложений 
	* Интерфейс сервера приложений и базы данных	
___________________________________________________________________________________

36.	Что такое тестирование рабочего процесса/воркфлоу? (Workflow testing)
Это тип тестирования программного обеспечения, который проверяет, что каждый software workflow точно отражает данный бизнес-процесс. Workflow - это серия задач для получения желаемого результата, которая обычно включает несколько этапов или шагов. Для любого бизнес-процесса тестирование этих последовательных шагов определяется как «WorkFlow testing». Например, убедитесь, что система может быть установлена ​​на платформе пользователя и работает правильно. Тестирование рабочего процесса проводится поэтапно. Вот как вы будете выполнять Workflow testing:
	* Начальная фаза (Inception phase): эта фаза включает начальное планирование испытаний и тестирование прототипа 
	* Фаза разработки (Elaboration phase): Эта фаза включает базовую архитектуру тестирования 
	* Фаза строительства (Construction phase): эта фаза включает в себя значительные испытания в каждой сборке 
	* Фаза перехода (Transition phase): Эта фаза включает в себя регрессионные тесты и повторные тесты исправлений
Тестирование workflow выполняется:
	* Test engineer: планирует цели теста и график. Определяет Test case и процедуры. Оценивает результаты теста.
	* Component engineer: Разработка тестовых компонентов. Автоматизирует некоторые тестовые процедуры.
	* Integration Tester: Выполнение интеграционных тестов и выявление дефектов 
	* System Testers: Выполнение системных тестов и отчеты о дефектах
___________________________________________________________________________________

37.	Что вы знаете о пользовательском приемочном тестировании? (UAT – User Acceptance testing)
Пользовательское приемочное тестирование (UAT) - это тип тестирования, выполняемый конечным пользователем или клиентом для проверки / принятия ПО перед его перемещением в production. UAT выполняется на заключительном этапе тестирования после выполнения функциональных, интеграционных и системных испытаний. Основной целью UAT является проверка end-to-end business flow. Он не фокусируется на косметических ошибках, орфографических ошибках или тестировании системы. Приемочное тестирование пользователя выполняется в отдельной среде тестирования с настройкой данных, аналогичных производственным. Это своего рода тестирование черного ящика, в котором будут участвовать два или более конечных пользователя. Этапы:
	* Анализ бизнес-требований 
	* Создать плана тестирования UAT 
	* Определить Test Scenario 
	* Создать Test case UAT 
	* Подготовить Test Data (Production like Data) 
	* Запустить Test case
	* Записать результаты
	* Подтвердить бизнес-цели
___________________________________________________________________________________

38.	Что такое эксплуатационное приемочное тестирование? (OAT — Operational Acceptance testing)
ИСПЫТАНИЕ НА ЭКСПЛУАТАЦИЮ (OAT) - это тип тестирования программного обеспечения, который оценивает операционную готовность программного приложения до его выпуска в производство. Целью эксплуатационного тестирования является обеспечение бесперебойной работы системы в ее стандартной операционной среде (SOE - standard operating environment). Это также называется Оперативное тестирование (Operational testing). Эксплуатационное приемочное тестирование обеспечивает соответствие системы и компонентов в стандартной операционной среде приложения (SOE). Типы OAT:
	* Installation testing
	* Load & Performance Test Operation
	* Backup and Restore testing
	* Security testing
	* Code Analysis
	* Fail over testing
	* Recovery testing
	* End-to-End Test Environment Operational testing
	* Operational Documentation Review
Примеры Test case:
	* Резервные копии, сделанные на одном сайте, могут быть развернуты на тот же сайт 
	* Резервные копии, сделанные на одном сайте, можно развернуть на другом сайте. 
	* Внедрение любых новых функций в живую производственную среду не должно отрицательно влиять на целостность текущих производственных услуг. 
	* Процесс внедрения может быть воспроизведен с использованием действующей документации 
	* Каждый компонент может быть отключен и успешно запущен в согласованные сроки. 
	* Для оповещений - все критические оповещения должны идти в TEC и ссылаться на документ правильного разрешения. 
	* Оповещения созданы и выдаются при превышении согласованных пороговых значений 
	* Любая документация по восстановлению, созданная или измененная, включая сервисные диаграммы, действительна 
	* Это должно быть передано в соответствующие области поддержки. 
	* Любой компонент, на который влияет сбой, должен показывать рекомендуемый порядок перезапуска, время завершения и т.д. 
___________________________________________________________________________________	
	
39.	Что такое инсталляционное тестирование?
Тестирование инсталляции (установки) направленно на проверку успешной инсталляции и настройки, а также обновления или удаления ПО, как десктопного, так и мобильного. Тестирование инсталляции в большинстве своем не входит в Веб-тестирование, являясь специализированным тестированием установки приложений на различные операционные системы. Следующие проверки должны быть выполнены для этапов: Установка. 
	* Установка должна начаться при клике по кнопке, подтверждающей данное действие
	* Установки во всех поддерживаемых окружениях и на всех поддерживаемых платформах
	* Установки в неподдерживаемых окружениях, а также в нужных окружениях с некорректными настройками
	* Права, которые требует инсталляция (чаще всего они должны быть админскими), проверить установить приложение как гость
	* Установки в clean state (при отсутствии любых возможных связанных файлов и предыдущих версий)
	* Подсчитывается ли при установке количество свободного места на диске и выдается ли предупреждение если места недостаточно
	* Установки загруженного ранее приложения, а также прямая установка с использованием сети/беспроводного соединения
	* Восстановится ли процесс установки при внезапном его прерывании (отключение устройства, отказ сети, отключение беспроводного соединения)
	* Установка приложения, его запуск, удаление приложения должны возвращать систему в исходное состояние
	* Распознается ли наличие в системе приложений/программ, необходимых для корректной работы устанавливаемого приложения
	* Повторный запуск установки приложения при уже текущем должен выдавать корректное сообщение, двойная установка должна быть исключена
	* Процесс установки может быть настраиваемый/дефолтный. Убедиться, что оба корректно работают
	* Наличие кнопки, которая предложит сохранить приложение в определенную папку, а также указывает дефолтное местоположение ("C:/programs/.")
	* Правильно ли установлены, сохранены ли в корректных папках файлы приложения
	* Наличие созданных ярлыков, корректно ли они расположены
	* После установки в системной вкладке " Программы и компоненты" должны быть доступны: название приложения, иконка, имя издателя, размер приложения, дата установки и номер версии
	* Настройки переменных сред PATH
	* Убедиться, что лицензионный ключ сохраняется в Windows Registry library
	* Поддерживает ли приложение функции ‘UnInstall’, ‘Modify’, ‘ReInstall’ и корректно ли они работают
	* Работа приложения с уже существующими DLL-файлами, с DLL-файлами приложений, которые необходимы для корректной работы устанавливаемого приложения
	* Наличие информации/сообщение о том, когда истекает срок действия установленной пробной версии приложения
Обновление:
	* Поддерживает ли приложение функцию обновления/автообновления
	* При попытке установить ранее установленную версию приложения система должна ее распознать и выдать корректное сообщение
	* Сохраняются ли пользовательские настройки при попытке загрузить новую версию/обновить старую версию
	* При попытке обновить версию должны быть доступны функции удалить приложение и восстановить приложение
	* Стандартные проверки как при первичной установке приложения
	* Убедиться, что номер версии приложения сменился новым
	* Запустить приложение и убедиться, что оно работает корректно
Откат до предыдущей версии:
	* Попробовать установить старую версию на более новую
	* Наличие корректного сообщения при попытке отката
	* Убедиться, что приложение работает корректно
Удаление приложения:
	* Не остается ли в системе никаких папок/файлов/ярлыков/ключей реестра после полного удаления приложения
	* Корректно ли работает система после установки и последующего удаления приложения
___________________________________________________________________________________

40.	Что вы знаете о тестировании безопасности?
Это тип тестирования ПО, который выявляет уязвимости, угрозы и риски. Целью тестов безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут привести к потере информации, доходов, репутации компании, сотрудников или клиентов. Общая стратегия безопасности основывается на трех основных принципах:
	* Конфиденциальность - сокрытие определенных ресурсов или информации
	* Целостность – ресурс может быть изменен только в соответствии с полномочиями пользователя
	* Доступность - ресурсы должны быть доступны только авторизованному пользователю, внутреннему объекту или устройству
Тестирование безопасности обычно выполняет отдельный специалист по безопасности. В ходе тестирования безопасности испытатель играет роль взломщика. Ему разрешено все:
	* попытки узнать пароль с помощью внешних средств;
	* атака системы с помощью специальных утилит, анализирующих защиты;
	* подавление, ошеломление системы (в надежде, что она откажется обслуживать других клиентов);
	* целенаправленное введение ошибок в надежде проникнуть в систему в ходе восстановления;
	* просмотр несекретных данных в надежде найти ключ для входа в систему.
При неограниченном времени и ресурсах хорошее тестирование безопасности взломает любую систему. Задача проектировщика системы — сделать цену проникновения более высокой, чем цена получаемой в результате информации. Типы тестирования безопасности:
	* Сканирование уязвимостей/оценка защищенности (Vulnerability Scanning) выполняется с помощью автоматизированного ПО для сканирования системы на наличие известных сигнатур уязвимостей. 
	* Сканирование безопасности (Security Scanning) включает в себя выявление слабых сторон сети и системы, а затем предоставляет решения для снижения этих рисков. Это сканирование может быть выполнено как ручным, так и автоматизированным.
	* Тестирование на проникновение (Penetration testing) - этот тип тестирования имитирует атаку злоумышленника. Это тестирование включает анализ конкретной системы для проверки потенциальных уязвимостей при попытке внешнего взлома. 
	* Оценка рисков (Risk Assessment) тестирование включает анализ рисков безопасности, наблюдаемых в организации. Риски классифицируются как Низкие, Средние и Высокие. Это тестирование рекомендует меры по снижению риска. 
	* Аудит безопасности (Security Auditing) - внутренняя проверка приложений и операционных систем на наличие уязвимостей. Аудит также может быть выполнен путем построчной проверки кода 
	* Этический взлом (Ethical hacking) - совершается с целью выявления проблем безопасности в системе. Это делается White Hat хакерами - это специалисты по безопасности, которые использует свои навыки законным способом для помощи в выявлении дефектов системы, в отличии от Black Hat (преступников) или Gray Hat (что-то между).
	* Оценка состояния (Posture Assessment) объединяет сканирование безопасности, этический взлом и оценки рисков, чтобы показать общее состояние безопасности организации.
___________________________________________________________________________________
	
	
	