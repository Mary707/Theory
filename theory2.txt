11.	Как вы тестируете продукт, если требования еще не зафиксированы?
Если спецификация требований недоступна для продукта, тогда план тестирования может быть создан на основе предположений, сделанных относительно продукта. Но мы должны хорошо документировать все предположения в плане тестирования. 
________________________________________________________________

12.	Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?
Прежде всего, мы проверим, охватывает ли каждое требование хотя бы один Test case. Если да, то можно сказать, что тестовых примеров достаточно для тестирования продукта. 
________________________________________________________________

13.	Что подразумевается под тестовыми данными? 
Тестовые данные - это набор входных значений, необходимых для выполнения Test case. тестировщики определяют данные в соответствии с требованиями. Они могут сделать это вручную или использовать инструменты генерации. 
________________________________________________________________

14.	Что такое бета-тестирование?
Бета-тестирование происходит на конечных пользователях. Это нужно для обеспечения обратной связи.  Существуют различные типы бета-тестов в тестировании ПО, и они заключаются в следующем: 
Традиционное бета-тестирование: продукт распространяется на целевой рынок, и соответствующие данные собираются по всем аспектам. Эти данные могут быть использованы для улучшения продукта. 
Публичное бета-тестирование: продукт публикуется во внешнем мире через онлайн-каналы, и данные могут быть получены от любого пользователя. На основе обратной связи могут быть сделаны улучшения продукта. 
Техническое бета-тестирование: продукт передается во внутреннюю группу организации и собирает отзывы / данные от сотрудников организации. 
Целевая бета-версия: продукт выпущен на рынок для сбора отзывов об особенностях программы. 
Бета-версия после выпуска. Продукт выпущен на рынок, и данные собираются для внесения улучшений в будущем выпуске продукта.
________________________________________________________________

15.	Что означает пилотное тестирование? (Pilot)
PILOT testing определяется как тип тестирования программного обеспечения, который проверяет компонент системы или всю систему в режиме реального времени. Целью пилотного теста является оценка осуществимости, времени, стоимости, риска и эффективности исследовательского проекта. Это тестирование проводится точно между UAT и Production. В пилотном тестировании выбранная группа конечных пользователей пробует тестируемую систему и предоставляет обратную связь до полного развертывания системы. Другими словами, это означает проведение генеральной репетиции для последующего теста на удобство использования. Пилотное тестирование помогает в раннем обнаружении ошибок в Системе. Пилотное тестирование связано с установкой системы на площадке заказчика (или в среде, моделируемой пользователем) для тестирования на предмет постоянного и регулярного использования. Выявленные недостатки затем отправляются команде разработчиков в виде отчетов об ошибках, и эти ошибки исправляются в следующей сборке системы. Во время этого процесса иногда приемочное тестирование также включается как часть тестирования на совместимость. Это происходит, когда система разрабатывается для замены старой. 
________________________________________________________________

16. В чем отличие build от release?
Билд это номер, даваемый ПО при передаче от разработчиков тестировщикам. Релиз — это номер, даваемый ПО при передаче конечному пользователю.
________________________________________________________________

17.	Что такое бизнес – логика?
Бизнес – логика (domain) это то, что конкретная программа по задумке должна сделать. Например, в складской программе проверка на возможность отправить товар (вдруг его нет в наличии). Это правила, которые должны соблюдаться в данной конкретной программе, определенные бизнес-клиентом. Слои приложения – слой пользовательского интерфейса, слой бизнес логики, слой сохранения данных.
________________________________________________________________

18.	Какие существуют основные виды тестирования ПО?
* Функциональные виды («Что?» - проверяет весь функционал продукта):
	-Функциональное тестирование (Functional testing)
	-Тестирование взаимодействия (Interoperability testing)
* Нефункциональное («Как?»):
	-Производительности (Performance)
		Тестирование емкости/способностей (Capacity testing)
		Стрессовое (Stress testing)
		Нагрузочное (Load testing)
		Объемное тестирование (Volume testing)
		Выносливости (Soak/Endurance testing)
		Стабильности/надежности (Stability / Reliability testing)
		Шиповое (Spike)
		Отказоустойчивости (Stability testing)
		Масштабируемости (Scalability test)
	-Отказ и восстановление (Failover and Recovery testing)
	-Удобство пользования (Usability testing)
	-Тестирование установки (Installation testing)
	-Тестирование безопасности (Security and Access Control testing)
	-Конфигурационное (Configuration testing)
* Связанное с изменениями:
	-Регрессионное (Regression testing)
	-Санитарное (Sanity testing)
	-Дымовое (Smoke testing)
	-Тестирование сборки (Build Verification testing)
________________________________________________________________

19.	Методы тестирования?
White/Black/Grey Box

		Что означает тестирование черного ящика?
Summary: Мы не знаем, как устроена внутри тестируемая система. Тестирование методом «черного ящика», также известное как тестирование, основанное на спецификации или тестирование поведения – техника тестирования, основанная на работе исключительно с внешними интерфейсами тестируемой системы. – тестирование, как функциональное, так и нефункциональное, не предполагающее знания внутреннего устройства компонента или системы. – тест-дизайн, основанный на технике черного ящика – процедура написания или выбора тест-кейсов на основе анализа функциональной или нефункциональной спецификации компонента или системы без знания ее внутреннего устройства. Почему именно «черный ящик»? Тестируемая программа для тестировщика – как черный непрозрачный ящик, содержания которого он не видит. Целью этой техники является поиск ошибок в таких категориях: – неправильно реализованные или недостающие функции; – ошибки интерфейса; – ошибки в структурах данных или организации доступа к внешним базам данных; – ошибки поведения или недостаточная производительности системы; Таким образом, мы не имеем представления о структуре и внутреннем устройстве системы. Нужно концентрироваться на том, ЧТО программа делает, а не на том, КАК она это делает. Пример: Тестировщик проводит тестирование веб-сайта, не зная особенностей его реализации, используя только предусмотренные разработчиком поля ввода и кнопки. Источник ожидаемого результата – спецификация. Поскольку это тип тестирования, по определению он может включать другие его виды. Тестирование черного ящика может быть как функциональным, так и нефункциональным. Функциональное тестирование предполагает проверку работы функций системы, а нефункциональное – соответственно, общие характеристики нашей программы. Техника черного ящика применима на всех уровнях тестирования (от модульного до приемочного), для которых существует спецификация. Например, при осуществлении системного или интеграционного тестирования, требования или функциональная спецификация будут основой для написания тест-кейсов. Техники тест-дизайна, основанные на использования черного ящика, включают: – классы эквивалентности; – анализ граничных значений; – таблицы решений; – диаграммы изменения состояния; – тестирование всех пар. Преимущества: – тестирование производится с позиции конечного пользователя и может помочь обнаружить неточности и противоречия в спецификации; – тестировщику нет необходимости знать языки программирования и углубляться в особенности реализации программы; – тестирование может производиться специалистами, независимыми от отдела разработки, что помогает избежать предвзятого отношения; – можно начинать писать тест-кейсы, как только готова спецификация. Недостатки: – тестируется только очень ограниченное количество путей выполнения программы; – без четкой спецификации (а это скорее реальность на многих проектах) достаточно трудно составить эффективные тест-кейсы; – некоторые тесты могут оказаться избыточными, если они уже были проведены разработчиком на уровне модульного тестирования; Противоположностью техники черного ящика является тестирование методом белого ящика, речь о котором пойдет ниже.
		
		Что означает тестирование белого ящика?
Тестирование методом белого ящика (также: прозрачного, открытого, стеклянного ящика; основанное на коде или структурное тестирование) – метод тестирования ПО, который предполагает, что внутренняя структура/устройство/реализация системы известны тестировщику. Мы выбираем входные значения, основываясь на знании кода, который будет их обрабатывать. Точно так же мы знаем, каким должен быть результат этой обработки. Знание всех особенностей тестируемой программы и ее реализации – обязательны для этой техники. Тестирование белого ящика – углубление во внутреннее устройство системы, за пределы ее внешних интерфейсов. Техника белого ящика применима на разных уровнях тестирования – от модульного до системного, но главным образом применяется именно для реализации модульного тестирования компонента его автором. Преимущества: – тестирование может производиться на ранних этапах: нет необходимости ждать создания пользовательского интерфейса; – можно провести более тщательное тестирование, с покрытием большого количества путей выполнения программы. Недостатки: – для выполнения тестирования белого ящика необходимо большое количество специальных знаний Основным методом тестирования Белого ящика является анализ покрытия кода. Анализ покрытия кода устраняет пробелы в наборе тестовых примеров. Он определяет области программы, которые не покрываются набором Test case. После выявления пробелов вы создаете контрольные примеры для проверки непроверенных частей кода, тем самым повышая качество программного продукта.
	* Охват операторов: - Этот метод требует, чтобы каждое возможное утверждение в коде было проверено хотя бы один раз в процессе тестирования разработки ПО.
	* Покрытие ветвления - этот метод проверяет все возможные пути (если-еще и другие условные циклы) программного приложения.
Помимо вышесказанного, существует множество типов покрытия, таких как покрытие условий, покрытие нескольких условий, покрытие пути, покрытие функций и т. д. Каждый метод имеет свои достоинства и пытается протестировать (охватить) все части программного кода. Используя покрытие Statement и Branch, вы обычно достигаете 80-90% покрытия кода, что является достаточным.
		
		Что означает тестирование серого ящика? (Grey box)
Тестирование методом серого ящика – метод тестирования ПО, который предполагает комбинацию White Box и Black Box подходов. То есть, внутреннее устройство программы нам известно лишь частично. Предполагается, например, доступ к внутренней структуре и алгоритмам работы ПО для написания максимально эффективных тест-кейсов, но само тестирование проводится с помощью техники черного ящика, то есть, с позиции пользователя. Либо нам не доступна внутренняя реализация функций, но мы знаем на уровень ниже, чем пользователи – интерфейсы/эндпоинты и т.п. Техника серого ящика применима на разных уровнях тестирования – от модульного до системного, но главным образом применяется на интеграционном уровне для проверки взаимодействия разных модулей программы. Пример тестирования «серого ящика»: при тестировании веб-сайтов на битые ссылки, если тестировщик сталкивается с какой-либо проблемой с этими ссылками, он может сразу же внести изменения в HTML-код и проверить в реальном времени. Методы:
	* Матричное тестирование: этот метод тестирования включает в себя определение всех переменных, которые существуют в их программах. 
	* Регрессионное тестирование: чтобы проверить, повлияло ли изменение в предыдущей версии другие аспекты программы в новой версии. 
	* Тестирование ортогональных массивов или OAT: обеспечивает максимальное покрытие кода с минимальным количеством тестов. 
	* Pattern testing: это тестирование выполняется на данных истории предыдущих дефектов системы. В отличие от тестирования черного ящика, в тестировании серого ящика копаются в коде и определяют причину сбоя.
________________________________________________________________

20.	Что такое пирамида / уровни тестирования?
«Пирамида тестов» — метафора, которая означает группировку тестов программного обеспечения по разным уровням детализации. Она также дает представление, какое количество тестов должно быть в каждой из этих групп. 
В тесте более высокого уровня вы не тестируете всю условную логику и пограничные случаи, которые уже покрыты юнит-тестами более низкого уровня. Убедитесь, что тест высокого уровня фокусируется только на том, что не покрыто тестами более низкого уровня. Правило трех А(AAA) (arrange, act, assert) или триада «дано, когда, тогда» — хорошая мнемоника, чтобы поддерживать хорошую структуру тестов. 
